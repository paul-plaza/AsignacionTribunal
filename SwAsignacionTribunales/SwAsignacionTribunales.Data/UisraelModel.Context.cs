//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SwAsignacionTribunales.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UniversidadIsraelEntities : DbContext
    {
        public UniversidadIsraelEntities()
            : base("name=UniversidadIsraelEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Empresa> Empresas { get; set; }
        public virtual DbSet<Tesi> Tesis { get; set; }
        public virtual DbSet<AsignacionFechaDefensa> AsignacionFechaDefensas { get; set; }
        public virtual DbSet<TipoIntegranteTribunal> TipoIntegranteTribunals { get; set; }
        public virtual DbSet<Tribunal> Tribunals { get; set; }
        public virtual DbSet<Url> Urls { get; set; }
        public virtual DbSet<SeguimientoTesi> SeguimientoTesis { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<DeudasPendientesEstudiante> DeudasPendientesEstudiantes { get; set; }
        public virtual DbSet<DocumentoIngreso> DocumentoIngresoes { get; set; }
        public virtual DbSet<EstudianteDocumentoIngreso> EstudianteDocumentoIngresoes { get; set; }
        public virtual DbSet<DetalleUsuario> DetalleUsuarios { get; set; }
        public virtual DbSet<Perfil> Perfils { get; set; }
        public virtual DbSet<Sistema> Sistemas { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }
        public virtual DbSet<UsuarioPerfil> UsuarioPerfils { get; set; }
        public virtual DbSet<UsuarioSistema> UsuarioSistemas { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<RegistroAccesoUsuario> RegistroAccesoUsuarios { get; set; }
        public virtual DbSet<PoyectoVinculacion> PoyectoVinculacions { get; set; }
        public virtual DbSet<PracticaVinculacionEstudiante> PracticaVinculacionEstudiantes { get; set; }
        public virtual DbSet<SeguimientoPracticasVinculacion> SeguimientoPracticasVinculacions { get; set; }
        public virtual DbSet<TipoPracticaVinculacion> TipoPracticaVinculacions { get; set; }
        public virtual DbSet<EstudiantePicExaman> EstudiantePicExamen { get; set; }
        public virtual DbSet<TipoPicExaman> TipoPicExamen { get; set; }
        public virtual DbSet<TipoRevision> TipoRevisions { get; set; }
        public virtual DbSet<TutoreSeguimiento> TutoreSeguimientoes { get; set; }
        public virtual DbSet<EstudianteHabilitacionEstudiante> EstudianteHabilitacionEstudiantes { get; set; }
        public virtual DbSet<HabilitacionEstudiante> HabilitacionEstudiantes { get; set; }
        public virtual DbSet<ObservacionHabilitacionEstudiante> ObservacionHabilitacionEstudiantes { get; set; }
        public virtual DbSet<V_Estudiante> V_Estudiante { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<SP_CARRERA_PERIODO_Result> SP_CARRERA_PERIODO(Nullable<int> pERIODO)
        {
            var pERIODOParameter = pERIODO.HasValue ?
                new ObjectParameter("PERIODO", pERIODO) :
                new ObjectParameter("PERIODO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CARRERA_PERIODO_Result>("SP_CARRERA_PERIODO", pERIODOParameter);
        }
    
        public virtual ObjectResult<SP_CARRERAS_PERIODO_ESTUDIANTE_Result> SP_CARRERAS_PERIODO_ESTUDIANTE(Nullable<int> pCARRERA, Nullable<int> pERIODO)
        {
            var pCARRERAParameter = pCARRERA.HasValue ?
                new ObjectParameter("PCARRERA", pCARRERA) :
                new ObjectParameter("PCARRERA", typeof(int));
    
            var pERIODOParameter = pERIODO.HasValue ?
                new ObjectParameter("PERIODO", pERIODO) :
                new ObjectParameter("PERIODO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CARRERAS_PERIODO_ESTUDIANTE_Result>("SP_CARRERAS_PERIODO_ESTUDIANTE", pCARRERAParameter, pERIODOParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<SP_DATOS_ESTUDIANTES_Result> SP_DATOS_ESTUDIANTES(Nullable<int> pCARRERA, Nullable<int> pERIODO)
        {
            var pCARRERAParameter = pCARRERA.HasValue ?
                new ObjectParameter("PCARRERA", pCARRERA) :
                new ObjectParameter("PCARRERA", typeof(int));
    
            var pERIODOParameter = pERIODO.HasValue ?
                new ObjectParameter("PERIODO", pERIODO) :
                new ObjectParameter("PERIODO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DATOS_ESTUDIANTES_Result>("SP_DATOS_ESTUDIANTES", pCARRERAParameter, pERIODOParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_PERIODO_Result> SP_PERIODO()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PERIODO_Result>("SP_PERIODO");
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SP_DATOS_DOCENTES_Result> SP_DATOS_DOCENTES()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DATOS_DOCENTES_Result>("SP_DATOS_DOCENTES");
        }
    }
}
